import Vue from 'vue'
import Vuex from 'vuex'
import axios from './axios-auth'
import globalAxios from 'axios'

import router from './router'

Vue.use(Vuex)

export default new Vuex.Store({

    state: {
        idToken: null,
        userId: null,
        email: null,
        country: null
    },

    mutations: {
        authUser(state, userData) {
            state.idToken = userData.token
            state.userId = userData.userId
        },
        storeUser(state, user) {
            state.email = user.email
            state.country = user.country
        },

        clearStoreData(state) {
            state.email = null
            state.country = null
        },
        clearAuthData(state) {
            state.idToken = null
            state.userId = null
        }
    },

    actions: {
        setLogoutTimer({ commit }, expirationTime) {
            setTimeout(() => {
                commit('clearAuthData')
            }, expirationTime * 1000)
        },
        signup({ commit, dispatch }, authData) {
            axios.post(':signUp?key=AIzaSyDngo_Xn_RSwKK0R6y9BqaR3012QwaT2Vw', {
                    email: authData.email,
                    password: authData.password,
                    returnSecureToken: true
                })
                .then(res => {
                    console.log(res)
                    commit('authUser', {
                        token: res.data.idToken,
                        userId: res.data.localId
                    })
                    const now = new Date()
                    const expirationDate = new Date(now.getTime() + res.data.expiresIn * 1000)
                    sessionStorage.setItem('token', res.data.idToken)
                    sessionStorage.setItem('userId', res.data.localId)
                    sessionStorage.setItem('expirationDate', expirationDate)
                    dispatch('storeUser', authData)
                    dispatch('setLogoutTimer', res.data.expiresIn)
                })
                .catch(error => console.log(error))
        },

        login({ commit, dispatch }, authData) {
            axios.post(':signInWithPassword?key=AIzaSyDngo_Xn_RSwKK0R6y9BqaR3012QwaT2Vw', {
                    email: authData.email,
                    password: authData.password,
                    returnSecureToken: true
                })
                .then(res => {
                    console.log(res)
                    const now = new Date()
                    const expirationDate = new Date(now.getTime() + res.data.expiresIn * 1000)
                    sessionStorage.setItem('token', res.data.idToken)
                    sessionStorage.setItem('userId', res.data.localId)
                    sessionStorage.setItem('expirationDate', expirationDate)
                    commit('authUser', {
                        token: res.data.idToken,
                        userId: res.data.localId,
                        email: res.data.email
                    })
                    dispatch('setLogoutTimer', res.data.expiresIn)
                        // dispatch('storeUser')
                    router.replace('/dashboard')

                })
                .catch(error => console.log(error))
        },

        tryAutoLogin({ commit }) {
            const token = sessionStorage.getItem('token')
            if (!token) {
                return
            }
            const expirationDate = sessionStorage.getItem('expirationDate')
            const now = new Date()
            if (now >= expirationDate) {
                return
            }
            const userId = sessionStorage.getItem('userId')
            const userStore = sessionStorage.getItem('storeData')
            commit('storeUser', {
                user: userStore
            })
            commit('authUser', {
                token: token,
                userId: userId
            })
        },

        logout({ commit }) {
            commit('clearAuthData')
            commit('clearStoreData')
            sessionStorage.removeItem('expirationDate')
            sessionStorage.removeItem('token')
            sessionStorage.removeItem('userId')
            router.replace('/signin')
        },

        // storeUser({ commit, state }, userData) {
        //     if (!state.idToken) {
        //         return
        //     }
        //     globalAxios.post('https://auth-7016e-default-rtdb.firebaseio.com/users.json' + '?auth=' + state.idToken, userData)
        //         .then(res =>
        //             console.log("get data"),
        //             console.log(res))
        //         .catch(error => console.log(error))
        // },

        fetchUser({ commit, state }) {
            if (!state.idToken) {
                return
            }
            globalAxios.get('https://auth-7016e-default-rtdb.firebaseio.com/users.json' + '?auth=' + state.idToken)
                .then(res => {
                    console.log(res)
                    const data = res.data
                    const users = []
                    for (let key in data) {
                        const user = data[key]
                        user.id = key
                        users.push(user)
                    }
                    console.log(users)
                    sessionStorage.setItem('storeData', users[0])

                    commit('storeUser', users[0])

                })
                .catch(error => console.log(error))
        }
    },
    getters: {
        userEmail(state) {
            return state.email
        },
        userCountry(state) {
            return state.country
        },
        isAuthenticated(state) {
            return state.idToken !== null
        }
    }
})